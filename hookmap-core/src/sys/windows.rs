mod button_state;
mod convert;
mod hook;
mod input;
mod vkcode;

use crate::button::{Button, ButtonAction};

pub(crate) use self::hook::{install, uninstall};

#[inline]
fn send_input(button: Button, action: ButtonAction, recursive: bool) {
    let left_and_right_modifier = match button {
        Button::Shift => Some((Button::LShift, Button::RShift)),
        Button::Ctrl => Some((Button::LCtrl, Button::RCtrl)),
        Button::Alt => Some((Button::LAlt, Button::RAlt)),
        Button::Super => Some((Button::LSuper, Button::RSuper)),
        _ => None,
    };
    if let Some((left, right)) = left_and_right_modifier {
        input::send_button_input(left, action, recursive);
        input::send_button_input(right, action, recursive);
    } else {
        input::send_button_input(button, action, recursive);
    }
}

impl Button {
    /// Simulates a button presses.
    #[inline]
    pub fn press(self) {
        send_input(self, ButtonAction::Press, false);
    }

    /// Simulates a button presses.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn press_recursive(self) {
        send_input(self, ButtonAction::Press, true);
    }

    /// Simulates a button releases.
    #[inline]
    pub fn release(self) {
        send_input(self, ButtonAction::Release, false);
    }

    /// Simulates a button releases.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn release_recursive(self) {
        send_input(self, ButtonAction::Release, true);
    }

    /// Simulates a button click.
    #[inline]
    pub fn click(self) {
        self.press();
        self.release();
    }

    /// Simulates a button click.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn click_recursive(self) {
        self.press_recursive();
        self.release_recursive();
    }

    /// Returns `true` if the button is pressed.
    #[inline]
    pub fn is_pressed(self) -> bool {
        input::is_pressed(self)
    }

    /// Returns `true` if the button is released.
    #[inline]
    pub fn is_released(self) -> bool {
        !input::is_pressed(self)
    }
}

pub mod mouse {
    //! Functions for mouse operations

    use super::input;

    /// Gets the position of the mouse cursor. `(x, y)`
    #[inline]
    pub fn get_position() -> (i32, i32) {
        input::get_cursor_position()
    }

    /// Moves the mouse cursor to the specified coordinates.
    #[inline]
    pub fn move_absolute(x: i32, y: i32) {
        input::move_cursor(x, y, true, false);
    }

    /// Moves the mouse cursor to the specified coordinates.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn move_absolute_recursive(x: i32, y: i32) {
        input::move_cursor(x, y, true, true);
    }

    /// Moves the mouse cursor a specified distance.
    #[inline]
    pub fn move_relative(dx: i32, dy: i32) {
        input::move_cursor(dx, dy, false, false);
    }

    /// Moves the mouse cursor a specified distance.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn move_relative_recursive(dx: i32, dy: i32) {
        input::move_cursor(dx, dy, false, true);
    }

    /// Rotates the mouse wheel.
    #[inline]
    pub fn rotate(speed: i32) {
        input::rotate_wheel(speed, false);
    }

    /// Rotates the mouse wheel.
    /// Events generated by this method can be hooked.
    #[inline]
    pub fn rotate_recursive(speed: i32) {
        input::rotate_wheel(speed, false);
    }
}
